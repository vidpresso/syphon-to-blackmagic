/* -LICENSE-START-
 ** Copyright (c) 2010 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 ** 
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 ** 
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */
//
//	GLScene.mm
//  OpenGLOutput
//

#include "GLScene.h"

GLScene::GLScene()
	: flRtri(0.0f), flRquad(0.0f)
{
	pMutex = [NSLock alloc];
}

GLScene::~GLScene()
{
    [syClient stop];
	[pMutex release];
}

void GLScene::setupSyphon()
{
    NSArray *available = [[SyphonServerDirectory sharedDirectory] servers];
    id description = [available objectAtIndex:0];
    syClient = [[SyphonClient alloc] initWithServerDescription:description options:nil newFrameHandler:nil];
}
void GLScene::InitScene()
{
	[pMutex lock];

    this->setupSyphon();
	glDepthFunc( GL_LEQUAL );                 // Type of depth test to do
	glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );
    glEnable(GL_BLEND);
    glBlendFunc (GL_ONE, GL_ONE_MINUS_SRC_ALPHA);

	[pMutex unlock];
}

void GLScene::DrawScene(GLint x, GLint y, GLsizei w, GLsizei h, CGLContextObj context)
{
	[pMutex lock];
	
	
	glClearColor(1.0, 0.0, 0.0, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
    
	// draw OpenGL scene
	glViewport (x, y, w, h);
    glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	glLoadIdentity();
	glOrtho(0.0, w, 0.0, h, -1, 1);
	
	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	glLoadIdentity();
    
    // Syphon drawing code
    SyphonImage *myFrame = [syClient newFrameImageForContext:context];
    if (myFrame)
    {
        glEnable(GL_TEXTURE_RECTANGLE_ARB);
		glBindTexture(GL_TEXTURE_RECTANGLE_ARB, [myFrame textureName]);
		// do a nearest linear interp.
		glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
        
		glColor4f(1.0, 1.0, 1.0, 1.0);
		
		NSSize imageSize = [myFrame textureSize];
		NSSize scaled;
		float wr = imageSize.width / h;
		float hr = imageSize.height / w;
		float ratio;
		ratio = (hr < wr ? wr : hr) * .65;
		scaled = NSMakeSize((imageSize.width / ratio), (imageSize.height / ratio));
		
		GLfloat tex_coords[] =
		{
			0.0,	0.0,
			imageSize.width,	0.0,
			imageSize.width,	imageSize.height,
			0.0,	imageSize.height
		};
		
		
		float halfw = scaled.width * 0.5;
		float halfh = scaled.height * 0.5;
		
		GLfloat verts[] =
		{
			-halfw, -halfh,
			halfw, -halfh,
			halfw, halfh,
			-halfw, halfh
		};
		
		glTranslated(w * 0.5, h * 0.5, 0.0);
		
		glEnableClientState( GL_TEXTURE_COORD_ARRAY );
		glTexCoordPointer(2, GL_FLOAT, 0, tex_coords );
		glEnableClientState(GL_VERTEX_ARRAY);
		glVertexPointer(2, GL_FLOAT, 0, verts );
		glDrawArrays( GL_TRIANGLE_FAN, 0, 4 );
		glDisableClientState( GL_TEXTURE_COORD_ARRAY );
		glDisableClientState(GL_VERTEX_ARRAY);
        
		glBindTexture(GL_TEXTURE_RECTANGLE_ARB, 0);

        [myFrame release];
    }
    // Restore OpenGL states
	glMatrixMode(GL_MODELVIEW);
	glPopMatrix();
	
	glMatrixMode(GL_PROJECTION);
	glPopMatrix();

	[pMutex unlock];
}

